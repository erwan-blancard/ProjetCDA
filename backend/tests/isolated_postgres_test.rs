use diesel::RunQueryDsl;
use diesel::r2d2::ConnectionManager;
use diesel::PgConnection;

#[actix_web::test]
async fn test_postgres_connection_isolated() {
    // Test PostgreSQL compl√®tement isol√©
    let database_url = std::env::var("DATABASE_URL")
        .expect("DATABASE_URL doit √™tre d√©fini");
    
    println!("üîó Test PostgreSQL isol√© - URL: {}", database_url);
    
    let manager = ConnectionManager::<PgConnection>::new(database_url);
    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Impossible de cr√©er le pool de connexions PostgreSQL");
    
    let mut conn = pool.get().expect("Impossible d'obtenir une connexion PostgreSQL");
    
    // Test de connexion
    let result = diesel::sql_query("SELECT 1 as test_value").execute(&mut conn);
    
    match result {
        Ok(_) => {
            println!("‚úÖ Connexion PostgreSQL r√©ussie !");
            assert!(true, "La connexion √† PostgreSQL fonctionne parfaitement");
        },
        Err(e) => {
            println!("‚ùå Erreur de connexion PostgreSQL: {:?}", e);
            panic!("La connexion √† PostgreSQL a √©chou√©: {:?}", e);
        }
    }
}

#[actix_web::test]
async fn test_postgres_version_isolated() {
    let database_url = std::env::var("DATABASE_URL")
        .expect("DATABASE_URL doit √™tre d√©fini");
    
    let manager = ConnectionManager::<PgConnection>::new(database_url);
    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Impossible de cr√©er le pool de connexions PostgreSQL");
    
    let mut conn = pool.get().expect("Impossible d'obtenir une connexion PostgreSQL");
    
    // Test de la version PostgreSQL
    let result = diesel::sql_query("SELECT version() as version").execute(&mut conn);
    
    match result {
        Ok(_) => {
            println!("‚úÖ Version PostgreSQL r√©cup√©r√©e avec succ√®s !");
            assert!(true, "La version PostgreSQL a √©t√© r√©cup√©r√©e");
        },
        Err(e) => {
            println!("‚ùå Erreur lors de la r√©cup√©ration de la version: {:?}", e);
            panic!("Impossible de r√©cup√©rer la version PostgreSQL: {:?}", e);
        }
    }
}

#[actix_web::test]
async fn test_postgres_tables_isolated() {
    let database_url = std::env::var("DATABASE_URL")
        .expect("DATABASE_URL doit √™tre d√©fini");
    
    let manager = ConnectionManager::<PgConnection>::new(database_url);
    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Impossible de cr√©er le pool de connexions PostgreSQL");
    
    let mut conn = pool.get().expect("Impossible d'obtenir une connexion PostgreSQL");
    
    // Test de la liste des tables
    let result = diesel::sql_query(
        "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
    ).execute(&mut conn);
    
    match result {
        Ok(_) => {
            println!("‚úÖ Liste des tables r√©cup√©r√©e avec succ√®s !");
            assert!(true, "La liste des tables a √©t√© r√©cup√©r√©e");
        },
        Err(e) => {
            println!("‚ùå Erreur lors de la r√©cup√©ration des tables: {:?}", e);
            panic!("Impossible de r√©cup√©rer la liste des tables: {:?}", e);
        }
    }
}

#[actix_web::test]
async fn test_postgres_full_workflow_isolated() {
    let database_url = std::env::var("DATABASE_URL")
        .expect("DATABASE_URL doit √™tre d√©fini");
    
    println!("üöÄ Test complet PostgreSQL isol√© - D√©marrage");
    
    let manager = ConnectionManager::<PgConnection>::new(database_url);
    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Impossible de cr√©er le pool de connexions PostgreSQL");
    
    // Test 1: Connexion simple
    let mut conn = pool.get().expect("Impossible d'obtenir une connexion PostgreSQL");
    println!("‚úÖ Test 1: Connexion √©tablie");
    
    // Test 2: Requ√™te simple
    let result1 = diesel::sql_query("SELECT 1 as test_value").execute(&mut conn);
    assert!(result1.is_ok(), "Requ√™te simple √©chou√©e");
    println!("‚úÖ Test 2: Requ√™te simple r√©ussie");
    
    // Test 3: Version PostgreSQL
    let result2 = diesel::sql_query("SELECT version() as version").execute(&mut conn);
    assert!(result2.is_ok(), "R√©cup√©ration de la version √©chou√©e");
    println!("‚úÖ Test 3: Version PostgreSQL r√©cup√©r√©e");
    
    // Test 4: Liste des tables
    let result3 = diesel::sql_query(
        "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
    ).execute(&mut conn);
    assert!(result3.is_ok(), "R√©cup√©ration des tables √©chou√©e");
    println!("‚úÖ Test 4: Liste des tables r√©cup√©r√©e");
    
    // Test 5: Test de transaction
    let result4 = diesel::sql_query("BEGIN").execute(&mut conn);
    assert!(result4.is_ok(), "D√©but de transaction √©chou√©");
    
    let result5 = diesel::sql_query("COMMIT").execute(&mut conn);
    assert!(result5.is_ok(), "Commit de transaction √©chou√©");
    println!("‚úÖ Test 5: Transaction test√©e");
    
    println!("üéâ Test complet PostgreSQL isol√© - SUCC√àS !");
} 